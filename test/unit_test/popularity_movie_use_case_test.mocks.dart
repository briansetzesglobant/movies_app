// Mocks generated by Mockito 5.3.2 from annotations
// in movies_app/test/unit_test/popularity_movie_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_app/data_state.dart' as _i4;
import 'package:movies_app/model/movie.dart' as _i9;
import 'package:movies_app/model/movies_list.dart' as _i7;
import 'package:movies_app/movie_api_service.dart' as _i2;
import 'package:movies_app/movie_data_base.dart' as _i3;
import 'package:movies_app/repository/movie_repository.dart' as _i5;
import 'package:movies_app/strategy/descending_sort_strategy.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieApiService_0 extends _i1.SmartFake
    implements _i2.MovieApiService {
  _FakeMovieApiService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieDatabase_1 extends _i1.SmartFake implements _i3.MovieDatabase {
  _FakeMovieDatabase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_2<T> extends _i1.SmartFake implements _i4.DataState<T> {
  _FakeDataState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i5.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieApiService get movieApiService => (super.noSuchMethod(
        Invocation.getter(#movieApiService),
        returnValue: _FakeMovieApiService_0(
          this,
          Invocation.getter(#movieApiService),
        ),
      ) as _i2.MovieApiService);
  @override
  _i3.MovieDatabase get movieDataBase => (super.noSuchMethod(
        Invocation.getter(#movieDataBase),
        returnValue: _FakeMovieDatabase_1(
          this,
          Invocation.getter(#movieDataBase),
        ),
      ) as _i3.MovieDatabase);
  @override
  _i6.Future<_i4.DataState<_i7.MoviesList>> getMoviesList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviesList,
          [],
        ),
        returnValue: _i6.Future<_i4.DataState<_i7.MoviesList>>.value(
            _FakeDataState_2<_i7.MoviesList>(
          this,
          Invocation.method(
            #getMoviesList,
            [],
          ),
        )),
      ) as _i6.Future<_i4.DataState<_i7.MoviesList>>);
}

/// A class which mocks [DescendingSortStrategy].
///
/// See the documentation for Mockito's code generation for more information.
class MockDescendingSortStrategy extends _i1.Mock
    implements _i8.DescendingSortStrategy {
  MockDescendingSortStrategy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i9.Movie> execute(List<_i9.Movie>? moviesList) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [moviesList],
        ),
        returnValue: <_i9.Movie>[],
      ) as List<_i9.Movie>);
}
