// Mocks generated by Mockito 5.4.0 from annotations
// in movies_app/test/unit_test/repository/movie_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_app/src/core/resource/data_state.dart' as _i3;
import 'package:movies_app/src/data/data_source/local/movie_data_base.dart'
    as _i7;
import 'package:movies_app/src/data/data_source/remote/movie_api_service.dart'
    as _i4;
import 'package:movies_app/src/domain/entity/movie_entity.dart' as _i8;
import 'package:movies_app/src/domain/entity/movies_list_entity.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_1<T> extends _i1.SmartFake implements _i3.DataState<T> {
  _FakeDataState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieApiService extends _i1.Mock implements _i4.MovieApiService {
  MockMovieApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);
  @override
  set client(_i2.Client? _client) => super.noSuchMethod(
        Invocation.setter(
          #client,
          _client,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i3.DataState<_i6.MoviesListEntity>> getMoviesList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviesList,
          [],
        ),
        returnValue: _i5.Future<_i3.DataState<_i6.MoviesListEntity>>.value(
            _FakeDataState_1<_i6.MoviesListEntity>(
          this,
          Invocation.method(
            #getMoviesList,
            [],
          ),
        )),
      ) as _i5.Future<_i3.DataState<_i6.MoviesListEntity>>);
}

/// A class which mocks [MovieDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDatabase extends _i1.Mock implements _i7.MovieDatabase {
  MockMovieDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> dropMovieCollection() => (super.noSuchMethod(
        Invocation.method(
          #dropMovieCollection,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> insertMovie(_i8.MovieEntity? movie) => (super.noSuchMethod(
        Invocation.method(
          #insertMovie,
          [movie],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<_i8.MovieEntity>> getMovies() => (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
        ),
        returnValue:
            _i5.Future<List<_i8.MovieEntity>>.value(<_i8.MovieEntity>[]),
      ) as _i5.Future<List<_i8.MovieEntity>>);
}
