// Mocks generated by Mockito 5.4.0 from annotations
// in movies_app/test/widget_test/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_app/src/core/resource/data_state.dart' as _i5;
import 'package:movies_app/src/core/use_case/use_case_interface.dart' as _i2;
import 'package:movies_app/src/data/model/movies_list.dart' as _i6;
import 'package:movies_app/src/presentation/bloc/movie_bloc.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUseCaseInterface_0<T> extends _i1.SmartFake
    implements _i2.UseCaseInterface<T> {
  _FakeUseCaseInterface_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieBloc extends _i1.Mock implements _i3.MovieBloc {
  MockMovieBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get useCase => (super.noSuchMethod(
        Invocation.getter(#useCase),
        returnValue: false,
      ) as bool);
  @override
  bool get sortingWay => (super.noSuchMethod(
        Invocation.getter(#sortingWay),
        returnValue: false,
      ) as bool);
  @override
  _i2.UseCaseInterface<dynamic> get useCaseInterface => (super.noSuchMethod(
        Invocation.getter(#useCaseInterface),
        returnValue: _FakeUseCaseInterface_0<dynamic>(
          this,
          Invocation.getter(#useCaseInterface),
        ),
      ) as _i2.UseCaseInterface<dynamic>);
  @override
  _i4.Stream<_i5.DataState<_i6.MoviesList>> get moviesListStream =>
      (super.noSuchMethod(
        Invocation.getter(#moviesListStream),
        returnValue: _i4.Stream<_i5.DataState<_i6.MoviesList>>.empty(),
      ) as _i4.Stream<_i5.DataState<_i6.MoviesList>>);
  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void getMoviesList() => super.noSuchMethod(
        Invocation.method(
          #getMoviesList,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
